import {
  Channel,
  Resource,
  invoke
} from "./chunk-7Z2V55DT.js";
import "./chunk-2TUXWMP5.js";

// node_modules/.pnpm/@tauri-apps+plugin-updater@2.3.1/node_modules/@tauri-apps/plugin-updater/dist-js/index.js
var Update = class extends Resource {
  constructor(metadata) {
    super(metadata.rid);
    this.available = metadata.available;
    this.currentVersion = metadata.currentVersion;
    this.version = metadata.version;
    this.date = metadata.date;
    this.body = metadata.body;
  }
  /** Download the updater package */
  async download(onEvent, options) {
    const channel = new Channel();
    if (onEvent) {
      channel.onmessage = onEvent;
    }
    const downloadedBytesRid = await invoke("plugin:updater|download", {
      onEvent: channel,
      rid: this.rid,
      ...options
    });
    this.downloadedBytes = new Resource(downloadedBytesRid);
  }
  /** Install downloaded updater package */
  async install() {
    if (!this.downloadedBytes) {
      throw new Error("Update.install called before Update.download");
    }
    await invoke("plugin:updater|install", {
      updateRid: this.rid,
      bytesRid: this.downloadedBytes.rid
    });
    this.downloadedBytes = void 0;
  }
  /** Downloads the updater package and installs it */
  async downloadAndInstall(onEvent, options) {
    const channel = new Channel();
    if (onEvent) {
      channel.onmessage = onEvent;
    }
    await invoke("plugin:updater|download_and_install", {
      onEvent: channel,
      rid: this.rid,
      ...options
    });
  }
  async close() {
    var _a;
    await ((_a = this.downloadedBytes) == null ? void 0 : _a.close());
    await super.close();
  }
};
async function check(options) {
  if (options == null ? void 0 : options.headers) {
    options.headers = Array.from(new Headers(options.headers).entries());
  }
  return await invoke("plugin:updater|check", {
    ...options
  }).then((meta) => meta.available ? new Update(meta) : null);
}
export {
  Update,
  check
};
//# sourceMappingURL=@tauri-apps_plugin-updater.js.map

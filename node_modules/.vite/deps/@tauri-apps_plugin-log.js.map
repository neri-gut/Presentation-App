{
  "version": 3,
  "sources": ["../../.pnpm/@tauri-apps+plugin-log@2.2.3/node_modules/@tauri-apps/plugin-log/dist-js/index.js"],
  "sourcesContent": ["import { invoke } from '@tauri-apps/api/core';\nimport { listen } from '@tauri-apps/api/event';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar LogLevel;\n(function (LogLevel) {\n    /**\n     * The \"trace\" level.\n     *\n     * Designates very low priority, often extremely verbose, information.\n     */\n    LogLevel[LogLevel[\"Trace\"] = 1] = \"Trace\";\n    /**\n     * The \"debug\" level.\n     *\n     * Designates lower priority information.\n     */\n    LogLevel[LogLevel[\"Debug\"] = 2] = \"Debug\";\n    /**\n     * The \"info\" level.\n     *\n     * Designates useful information.\n     */\n    LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n    /**\n     * The \"warn\" level.\n     *\n     * Designates hazardous situations.\n     */\n    LogLevel[LogLevel[\"Warn\"] = 4] = \"Warn\";\n    /**\n     * The \"error\" level.\n     *\n     * Designates very serious errors.\n     */\n    LogLevel[LogLevel[\"Error\"] = 5] = \"Error\";\n})(LogLevel || (LogLevel = {}));\nfunction getCallerLocation(stack) {\n    if (!stack) {\n        return;\n    }\n    if (stack.startsWith('Error')) {\n        // Assume it's Chromium V8\n        //\n        // Error\n        //     at baz (filename.js:10:15)\n        //     at bar (filename.js:6:3)\n        //     at foo (filename.js:2:3)\n        //     at filename.js:13:1\n        const lines = stack.split('\\n');\n        // Find the third line (caller's caller of the current location)\n        const callerLine = lines[3]?.trim();\n        if (!callerLine) {\n            return;\n        }\n        const regex = /at\\s+(?<functionName>.*?)\\s+\\((?<fileName>.*?):(?<lineNumber>\\d+):(?<columnNumber>\\d+)\\)/;\n        const match = callerLine.match(regex);\n        if (match) {\n            const { functionName, fileName, lineNumber, columnNumber } = match.groups;\n            return `${functionName}@${fileName}:${lineNumber}:${columnNumber}`;\n        }\n        else {\n            // Handle cases where the regex does not match (e.g., last line without function name)\n            const regexNoFunction = /at\\s+(?<fileName>.*?):(?<lineNumber>\\d+):(?<columnNumber>\\d+)/;\n            const matchNoFunction = callerLine.match(regexNoFunction);\n            if (matchNoFunction) {\n                const { fileName, lineNumber, columnNumber } = matchNoFunction.groups;\n                return `<anonymous>@${fileName}:${lineNumber}:${columnNumber}`;\n            }\n        }\n    }\n    else {\n        // Assume it's Webkit JavaScriptCore, example:\n        //\n        // baz@filename.js:10:24\n        // bar@filename.js:6:6\n        // foo@filename.js:2:6\n        // global code@filename.js:13:4\n        const traces = stack.split('\\n').map((line) => line.split('@'));\n        const filtered = traces.filter(([name, location]) => {\n            return name.length > 0 && location !== '[native code]';\n        });\n        // Find the third line (caller's caller of the current location)\n        return filtered[2]?.filter((v) => v.length > 0).join('@');\n    }\n}\nasync function log(level, message, options) {\n    const location = getCallerLocation(new Error().stack);\n    const { file, line, keyValues } = options ?? {};\n    await invoke('plugin:log|log', {\n        level,\n        message,\n        location,\n        file,\n        line,\n        keyValues\n    });\n}\n/**\n * Logs a message at the error level.\n *\n * @param message\n *\n * # Examples\n *\n * ```js\n * import { error } from '@tauri-apps/plugin-log';\n *\n * const err_info = \"No connection\";\n * const port = 22;\n *\n * error(`Error: ${err_info} on port ${port}`);\n * ```\n */\nasync function error(message, options) {\n    await log(LogLevel.Error, message, options);\n}\n/**\n * Logs a message at the warn level.\n *\n * @param message\n *\n * # Examples\n *\n * ```js\n * import { warn } from '@tauri-apps/plugin-log';\n *\n * const warn_description = \"Invalid Input\";\n *\n * warn(`Warning! {warn_description}!`);\n * ```\n */\nasync function warn(message, options) {\n    await log(LogLevel.Warn, message, options);\n}\n/**\n * Logs a message at the info level.\n *\n * @param message\n *\n * # Examples\n *\n * ```js\n * import { info } from '@tauri-apps/plugin-log';\n *\n * const conn_info = { port: 40, speed: 3.20 };\n *\n * info(`Connected to port {conn_info.port} at {conn_info.speed} Mb/s`);\n * ```\n */\nasync function info(message, options) {\n    await log(LogLevel.Info, message, options);\n}\n/**\n * Logs a message at the debug level.\n *\n * @param message\n *\n * # Examples\n *\n * ```js\n * import { debug } from '@tauri-apps/plugin-log';\n *\n * const pos = { x: 3.234, y: -1.223 };\n *\n * debug(`New position: x: {pos.x}, y: {pos.y}`);\n * ```\n */\nasync function debug(message, options) {\n    await log(LogLevel.Debug, message, options);\n}\n/**\n * Logs a message at the trace level.\n *\n * @param message\n *\n * # Examples\n *\n * ```js\n * import { trace } from '@tauri-apps/plugin-log';\n *\n * let pos = { x: 3.234, y: -1.223 };\n *\n * trace(`Position is: x: {pos.x}, y: {pos.y}`);\n * ```\n */\nasync function trace(message, options) {\n    await log(LogLevel.Trace, message, options);\n}\n/**\n * Attaches a listener for the log, and calls the passed function for each log entry.\n * @param fn\n *\n * @returns a function to cancel the listener.\n */\nasync function attachLogger(fn) {\n    return await listen('log://log', (event) => {\n        const { level } = event.payload;\n        let { message } = event.payload;\n        // Strip ANSI escape codes\n        message = message.replace(\n        // TODO: Investigate security/detect-unsafe-regex\n        // eslint-disable-next-line no-control-regex, security/detect-unsafe-regex\n        /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');\n        fn({ message, level });\n    });\n}\n/**\n * Attaches a listener that writes log entries to the console as they come in.\n *\n * @returns a function to cancel the listener.\n */\nasync function attachConsole() {\n    return await attachLogger(({ level, message }) => {\n        switch (level) {\n            case LogLevel.Trace:\n                console.log(message);\n                break;\n            case LogLevel.Debug:\n                console.debug(message);\n                break;\n            case LogLevel.Info:\n                console.info(message);\n                break;\n            case LogLevel.Warn:\n                console.warn(message);\n                break;\n            case LogLevel.Error:\n                console.error(message);\n                break;\n            default:\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                throw new Error(`unknown log level ${level}`);\n        }\n    });\n}\n\nexport { attachConsole, attachLogger, debug, error, info, trace, warn };\n"],
  "mappings": "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",
  "names": ["LogLevel"]
}

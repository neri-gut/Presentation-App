import {
  listen
} from "./chunk-VOUCYQK2.js";
import {
  invoke
} from "./chunk-7Z2V55DT.js";
import "./chunk-2TUXWMP5.js";

// node_modules/.pnpm/@tauri-apps+plugin-log@2.2.3/node_modules/@tauri-apps/plugin-log/dist-js/index.js
var LogLevel;
(function(LogLevel2) {
  LogLevel2[LogLevel2["Trace"] = 1] = "Trace";
  LogLevel2[LogLevel2["Debug"] = 2] = "Debug";
  LogLevel2[LogLevel2["Info"] = 3] = "Info";
  LogLevel2[LogLevel2["Warn"] = 4] = "Warn";
  LogLevel2[LogLevel2["Error"] = 5] = "Error";
})(LogLevel || (LogLevel = {}));
function getCallerLocation(stack) {
  var _a, _b;
  if (!stack) {
    return;
  }
  if (stack.startsWith("Error")) {
    const lines = stack.split("\n");
    const callerLine = (_a = lines[3]) == null ? void 0 : _a.trim();
    if (!callerLine) {
      return;
    }
    const regex = /at\s+(?<functionName>.*?)\s+\((?<fileName>.*?):(?<lineNumber>\d+):(?<columnNumber>\d+)\)/;
    const match = callerLine.match(regex);
    if (match) {
      const { functionName, fileName, lineNumber, columnNumber } = match.groups;
      return `${functionName}@${fileName}:${lineNumber}:${columnNumber}`;
    } else {
      const regexNoFunction = /at\s+(?<fileName>.*?):(?<lineNumber>\d+):(?<columnNumber>\d+)/;
      const matchNoFunction = callerLine.match(regexNoFunction);
      if (matchNoFunction) {
        const { fileName, lineNumber, columnNumber } = matchNoFunction.groups;
        return `<anonymous>@${fileName}:${lineNumber}:${columnNumber}`;
      }
    }
  } else {
    const traces = stack.split("\n").map((line) => line.split("@"));
    const filtered = traces.filter(([name, location]) => {
      return name.length > 0 && location !== "[native code]";
    });
    return (_b = filtered[2]) == null ? void 0 : _b.filter((v) => v.length > 0).join("@");
  }
}
async function log(level, message, options) {
  const location = getCallerLocation(new Error().stack);
  const { file, line, keyValues } = options ?? {};
  await invoke("plugin:log|log", {
    level,
    message,
    location,
    file,
    line,
    keyValues
  });
}
async function error(message, options) {
  await log(LogLevel.Error, message, options);
}
async function warn(message, options) {
  await log(LogLevel.Warn, message, options);
}
async function info(message, options) {
  await log(LogLevel.Info, message, options);
}
async function debug(message, options) {
  await log(LogLevel.Debug, message, options);
}
async function trace(message, options) {
  await log(LogLevel.Trace, message, options);
}
async function attachLogger(fn) {
  return await listen("log://log", (event) => {
    const { level } = event.payload;
    let { message } = event.payload;
    message = message.replace(
      // TODO: Investigate security/detect-unsafe-regex
      // eslint-disable-next-line no-control-regex, security/detect-unsafe-regex
      /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,
      ""
    );
    fn({ message, level });
  });
}
async function attachConsole() {
  return await attachLogger(({ level, message }) => {
    switch (level) {
      case LogLevel.Trace:
        console.log(message);
        break;
      case LogLevel.Debug:
        console.debug(message);
        break;
      case LogLevel.Info:
        console.info(message);
        break;
      case LogLevel.Warn:
        console.warn(message);
        break;
      case LogLevel.Error:
        console.error(message);
        break;
      default:
        throw new Error(`unknown log level ${level}`);
    }
  });
}
export {
  attachConsole,
  attachLogger,
  debug,
  error,
  info,
  trace,
  warn
};
//# sourceMappingURL=@tauri-apps_plugin-log.js.map
